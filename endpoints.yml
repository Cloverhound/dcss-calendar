swagger: '2.0'
info:
  version: 1.0.0
  title: dcss-calendar-2
  description: dcss-calendar-2
basePath: /api
paths:
  '/Queues/{id}/schedule':
    get:
      tags:
        - Queue
      summary: Fetches belongsTo relation schedule.
      operationId: Queue.prototype.__get__schedule
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  '/Queues/{id}/holidayList':
    get:
      tags:
        - Queue
      summary: Fetches belongsTo relation holidayList.
      operationId: Queue.prototype.__get__holidayList
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  '/Queues/{id}/prompts/{fk}':
    get:
      tags:
        - Queue
      summary: Find a related item by id for prompts.
      operationId: Queue.prototype.__findById__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for prompts
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    delete:
      tags:
        - Queue
      summary: Delete a related item by id for prompts.
      operationId: Queue.prototype.__destroyById__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for prompts
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Queue
      summary: Update a related item by id for prompts.
      operationId: Queue.prototype.__updateById__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for prompts
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  '/Queues/{id}/lcsa':
    get:
      tags:
        - Queue
      summary: Fetches belongsTo relation lcsa.
      operationId: Queue.prototype.__get__lcsa
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  '/Queues/{id}/prompts':
    get:
      tags:
        - Queue
      summary: Queries prompts of Queue.
      operationId: Queue.prototype.__get__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Prompt'
      deprecated: false
    post:
      tags:
        - Queue
      summary: Creates a new instance in prompts of this model.
      operationId: Queue.prototype.__create__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    delete:
      tags:
        - Queue
      summary: Deletes all prompts of this model.
      operationId: Queue.prototype.__delete__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Queues/{id}/prompts/count':
    get:
      tags:
        - Queue
      summary: Counts prompts of Queue.
      operationId: Queue.prototype.__count__prompts
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Queues:
    post:
      tags:
        - Queue
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Queue.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    patch:
      tags:
        - Queue
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Queue.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    put:
      tags:
        - Queue
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Queue.replaceOrCreate__put_Queues
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    get:
      tags:
        - Queue
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Queue.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Queue'
      deprecated: false
  /Queues/replaceOrCreate:
    post:
      tags:
        - Queue
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Queue.replaceOrCreate__post_Queues_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  /Queues/upsertWithWhere:
    post:
      tags:
        - Queue
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Queue.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  '/Queues/{id}/exists':
    get:
      tags:
        - Queue
      summary: Check whether a model instance exists in the data source.
      operationId: 'Queue.exists__get_Queues_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Queues/{id}':
    head:
      tags:
        - Queue
      summary: Check whether a model instance exists in the data source.
      operationId: 'Queue.exists__head_Queues_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Queue
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Queue.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    put:
      tags:
        - Queue
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Queue.replaceById__put_Queues_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - Queue
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Queue.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Queue
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Queue.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Queue id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  '/Queues/{id}/replace':
    post:
      tags:
        - Queue
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Queue.replaceById__post_Queues_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  /Queues/findOne:
    get:
      tags:
        - Queue
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Queue.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  /Queues/update:
    post:
      tags:
        - Queue
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Queue.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Queues/count:
    get:
      tags:
        - Queue
      summary: Count instances of the model matched by where from the data source.
      operationId: Queue.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Queues/change-stream:
    post:
      tags:
        - Queue
      summary: Create a change stream.
      operationId: Queue.createChangeStream__post_Queues_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Queue
      summary: Create a change stream.
      operationId: Queue.createChangeStream__get_Queues_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Queues/{code}/status':
    get:
      tags:
        - Queue
      operationId: Queue.getStatus
      parameters:
        - name: code
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              county:
                type: object
      deprecated: false
  /Queues/getAllQueuesWithStatus:
    get:
      tags:
        - Queue
      operationId: Queue.getAllQueuesWithStatus
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              counties:
                type: array
                items:
                  type: object
      deprecated: false
  /Queues/createQueueAndPrompts:
    post:
      tags:
        - Queue
      operationId: Queue.createQueueAndPrompts
      parameters:
        - name: queue
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: object
      deprecated: false
  /Queues/optionalPromptToggle:
    put:
      tags:
        - Queue
      operationId: Queue.optionalPromptToggle
      parameters:
        - name: queue
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: object
      deprecated: false
  '/Queues/{code}/directionPrompts':
    get:
      tags:
        - Queue
      operationId: Queue.directionPrompts
      parameters:
        - name: code
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              files:
                type: object
      deprecated: false
  '/Queues/{code}/optionalPrompts':
    get:
      tags:
        - Queue
      operationId: Queue.optionalPrompts
      parameters:
        - name: code
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              files:
                type: object
      deprecated: false
  '/Queues/{countyTransferRange}/queue':
    get:
      tags:
        - Queue
      operationId: Queue.countyTransferRange
      parameters:
        - name: countyTransferRange
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              queue:
                type: object
      deprecated: false
  /Queues/forceCloseToggle:
    put:
      tags:
        - Queue
      operationId: Queue.forceCloseToggle
      parameters:
        - name: queue
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: object
      deprecated: false
  '/Queues/{code}/getQueueWithCountyCode':
    get:
      tags:
        - Queue
      operationId: Queue.getQueueWithCountyCode
      parameters:
        - name: code
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              queue:
                type: object
      deprecated: false
  '/Schedules/{id}/queues/{fk}':
    get:
      tags:
        - Schedule
      summary: Find a related item by id for queues.
      operationId: Schedule.prototype.__findById__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Delete a related item by id for queues.
      operationId: Schedule.prototype.__destroyById__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Schedule
      summary: Update a related item by id for queues.
      operationId: Schedule.prototype.__updateById__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  '/Schedules/{id}/recurringTimeRanges/{fk}':
    get:
      tags:
        - Schedule
      summary: Find a related item by id for recurringTimeRanges.
      operationId: Schedule.prototype.__findById__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for recurringTimeRanges
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Delete a related item by id for recurringTimeRanges.
      operationId: Schedule.prototype.__destroyById__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for recurringTimeRanges
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Schedule
      summary: Update a related item by id for recurringTimeRanges.
      operationId: Schedule.prototype.__updateById__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for recurringTimeRanges
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  '/Schedules/{id}/singleDateTimeRanges/{fk}':
    get:
      tags:
        - Schedule
      summary: Find a related item by id for singleDateTimeRanges.
      operationId: Schedule.prototype.__findById__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for singleDateTimeRanges
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Delete a related item by id for singleDateTimeRanges.
      operationId: Schedule.prototype.__destroyById__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for singleDateTimeRanges
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Schedule
      summary: Update a related item by id for singleDateTimeRanges.
      operationId: Schedule.prototype.__updateById__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for singleDateTimeRanges
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  '/Schedules/{id}/queues':
    get:
      tags:
        - Schedule
      summary: Queries queues of Schedule.
      operationId: Schedule.prototype.__get__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Queue'
      deprecated: false
    post:
      tags:
        - Schedule
      summary: Creates a new instance in queues of this model.
      operationId: Schedule.prototype.__create__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Deletes all queues of this model.
      operationId: Schedule.prototype.__delete__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Schedules/{id}/queues/count':
    get:
      tags:
        - Schedule
      summary: Counts queues of Schedule.
      operationId: Schedule.prototype.__count__queues
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Schedules/{id}/recurringTimeRanges':
    get:
      tags:
        - Schedule
      summary: Queries recurringTimeRanges of Schedule.
      operationId: Schedule.prototype.__get__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    post:
      tags:
        - Schedule
      summary: Creates a new instance in recurringTimeRanges of this model.
      operationId: Schedule.prototype.__create__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Deletes all recurringTimeRanges of this model.
      operationId: Schedule.prototype.__delete__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Schedules/{id}/recurringTimeRanges/count':
    get:
      tags:
        - Schedule
      summary: Counts recurringTimeRanges of Schedule.
      operationId: Schedule.prototype.__count__recurringTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Schedules/{id}/singleDateTimeRanges':
    get:
      tags:
        - Schedule
      summary: Queries singleDateTimeRanges of Schedule.
      operationId: Schedule.prototype.__get__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    post:
      tags:
        - Schedule
      summary: Creates a new instance in singleDateTimeRanges of this model.
      operationId: Schedule.prototype.__create__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: Deletes all singleDateTimeRanges of this model.
      operationId: Schedule.prototype.__delete__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Schedules/{id}/singleDateTimeRanges/count':
    get:
      tags:
        - Schedule
      summary: Counts singleDateTimeRanges of Schedule.
      operationId: Schedule.prototype.__count__singleDateTimeRanges
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Schedules:
    post:
      tags:
        - Schedule
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Schedule.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
    patch:
      tags:
        - Schedule
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Schedule.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
    put:
      tags:
        - Schedule
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Schedule.replaceOrCreate__put_Schedules
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
    get:
      tags:
        - Schedule
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Schedule.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Schedule'
      deprecated: false
  /Schedules/replaceOrCreate:
    post:
      tags:
        - Schedule
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Schedule.replaceOrCreate__post_Schedules_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  /Schedules/upsertWithWhere:
    post:
      tags:
        - Schedule
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Schedule.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  '/Schedules/{id}/exists':
    get:
      tags:
        - Schedule
      summary: Check whether a model instance exists in the data source.
      operationId: 'Schedule.exists__get_Schedules_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Schedules/{id}':
    head:
      tags:
        - Schedule
      summary: Check whether a model instance exists in the data source.
      operationId: 'Schedule.exists__head_Schedules_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Schedule
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Schedule.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
    put:
      tags:
        - Schedule
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Schedule.replaceById__put_Schedules_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
    delete:
      tags:
        - Schedule
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Schedule.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Schedule
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Schedule.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Schedule id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  '/Schedules/{id}/replace':
    post:
      tags:
        - Schedule
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Schedule.replaceById__post_Schedules_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  /Schedules/findOne:
    get:
      tags:
        - Schedule
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Schedule.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  /Schedules/update:
    post:
      tags:
        - Schedule
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Schedule.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Schedules/count:
    get:
      tags:
        - Schedule
      summary: Count instances of the model matched by where from the data source.
      operationId: Schedule.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Schedules/change-stream:
    post:
      tags:
        - Schedule
      summary: Create a change stream.
      operationId: Schedule.createChangeStream__post_Schedules_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Schedule
      summary: Create a change stream.
      operationId: Schedule.createChangeStream__get_Schedules_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Schedules/createWithTimeRanges:
    post:
      tags:
        - Schedule
      operationId: Schedule.createWithTimeRanges
      parameters:
        - name: schedule
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Schedules/{id}/updateWithTimeRanges':
    put:
      tags:
        - Schedule
      operationId: Schedule.updateWithTimeRanges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
        - name: schedule
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Schedules/{id}/deleteWithTimeRanges':
    delete:
      tags:
        - Schedule
      operationId: Schedule.deleteWithTimeRanges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Holidays/{id}/holidayList':
    get:
      tags:
        - Holiday
      summary: Fetches belongsTo relation holidayList.
      operationId: Holiday.prototype.__get__holidayList
      parameters:
        - name: id
          in: path
          description: Holiday id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  /Holidays:
    post:
      tags:
        - Holiday
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Holiday.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    patch:
      tags:
        - Holiday
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Holiday.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    put:
      tags:
        - Holiday
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Holiday.replaceOrCreate__put_Holidays
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    get:
      tags:
        - Holiday
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Holiday.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Holiday'
      deprecated: false
  /Holidays/replaceOrCreate:
    post:
      tags:
        - Holiday
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Holiday.replaceOrCreate__post_Holidays_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  /Holidays/upsertWithWhere:
    post:
      tags:
        - Holiday
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Holiday.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  '/Holidays/{id}/exists':
    get:
      tags:
        - Holiday
      summary: Check whether a model instance exists in the data source.
      operationId: 'Holiday.exists__get_Holidays_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Holidays/{id}':
    head:
      tags:
        - Holiday
      summary: Check whether a model instance exists in the data source.
      operationId: 'Holiday.exists__head_Holidays_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Holiday
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Holiday.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    put:
      tags:
        - Holiday
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Holiday.replaceById__put_Holidays_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    delete:
      tags:
        - Holiday
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Holiday.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Holiday
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Holiday.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Holiday id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  '/Holidays/{id}/replace':
    post:
      tags:
        - Holiday
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Holiday.replaceById__post_Holidays_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  /Holidays/findOne:
    get:
      tags:
        - Holiday
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Holiday.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  /Holidays/update:
    post:
      tags:
        - Holiday
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Holiday.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Holidays/count:
    get:
      tags:
        - Holiday
      summary: Count instances of the model matched by where from the data source.
      operationId: Holiday.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Holidays/change-stream:
    post:
      tags:
        - Holiday
      summary: Create a change stream.
      operationId: Holiday.createChangeStream__post_Holidays_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Holiday
      summary: Create a change stream.
      operationId: Holiday.createChangeStream__get_Holidays_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/HolidayLists/{id}/holidays/{fk}':
    get:
      tags:
        - HolidayList
      summary: Find a related item by id for holidays.
      operationId: HolidayList.prototype.__findById__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for holidays
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    delete:
      tags:
        - HolidayList
      summary: Delete a related item by id for holidays.
      operationId: HolidayList.prototype.__destroyById__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for holidays
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - HolidayList
      summary: Update a related item by id for holidays.
      operationId: HolidayList.prototype.__updateById__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for holidays
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
  '/HolidayLists/{id}/queues/{fk}':
    get:
      tags:
        - HolidayList
      summary: Find a related item by id for queues.
      operationId: HolidayList.prototype.__findById__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - HolidayList
      summary: Delete a related item by id for queues.
      operationId: HolidayList.prototype.__destroyById__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - HolidayList
      summary: Update a related item by id for queues.
      operationId: HolidayList.prototype.__updateById__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  '/HolidayLists/{id}/holidays':
    get:
      tags:
        - HolidayList
      summary: Queries holidays of HolidayList.
      operationId: HolidayList.prototype.__get__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Holiday'
      deprecated: false
    post:
      tags:
        - HolidayList
      summary: Creates a new instance in holidays of this model.
      operationId: HolidayList.prototype.__create__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Holiday'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Holiday'
      deprecated: false
    delete:
      tags:
        - HolidayList
      summary: Deletes all holidays of this model.
      operationId: HolidayList.prototype.__delete__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/HolidayLists/{id}/holidays/count':
    get:
      tags:
        - HolidayList
      summary: Counts holidays of HolidayList.
      operationId: HolidayList.prototype.__count__holidays
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/HolidayLists/{id}/queues':
    get:
      tags:
        - HolidayList
      summary: Queries queues of HolidayList.
      operationId: HolidayList.prototype.__get__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Queue'
      deprecated: false
    post:
      tags:
        - HolidayList
      summary: Creates a new instance in queues of this model.
      operationId: HolidayList.prototype.__create__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - HolidayList
      summary: Deletes all queues of this model.
      operationId: HolidayList.prototype.__delete__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/HolidayLists/{id}/queues/count':
    get:
      tags:
        - HolidayList
      summary: Counts queues of HolidayList.
      operationId: HolidayList.prototype.__count__queues
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /HolidayLists:
    post:
      tags:
        - HolidayList
      summary: Create a new instance of the model and persist it into the data source.
      operationId: HolidayList.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
    patch:
      tags:
        - HolidayList
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: HolidayList.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
    put:
      tags:
        - HolidayList
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: HolidayList.replaceOrCreate__put_HolidayLists
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
    get:
      tags:
        - HolidayList
      summary: Find all instances of the model matched by filter from the data source.
      operationId: HolidayList.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/HolidayList'
      deprecated: false
  /HolidayLists/replaceOrCreate:
    post:
      tags:
        - HolidayList
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: HolidayList.replaceOrCreate__post_HolidayLists_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  /HolidayLists/upsertWithWhere:
    post:
      tags:
        - HolidayList
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: HolidayList.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  '/HolidayLists/{id}/exists':
    get:
      tags:
        - HolidayList
      summary: Check whether a model instance exists in the data source.
      operationId: 'HolidayList.exists__get_HolidayLists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/HolidayLists/{id}':
    head:
      tags:
        - HolidayList
      summary: Check whether a model instance exists in the data source.
      operationId: 'HolidayList.exists__head_HolidayLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - HolidayList
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: HolidayList.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
    put:
      tags:
        - HolidayList
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'HolidayList.replaceById__put_HolidayLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
    delete:
      tags:
        - HolidayList
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: HolidayList.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - HolidayList
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: HolidayList.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: HolidayList id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  '/HolidayLists/{id}/replace':
    post:
      tags:
        - HolidayList
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'HolidayList.replaceById__post_HolidayLists_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  /HolidayLists/findOne:
    get:
      tags:
        - HolidayList
      summary: Find first instance of the model matched by filter from the data source.
      operationId: HolidayList.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/HolidayList'
      deprecated: false
  /HolidayLists/update:
    post:
      tags:
        - HolidayList
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: HolidayList.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/HolidayList'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /HolidayLists/count:
    get:
      tags:
        - HolidayList
      summary: Count instances of the model matched by where from the data source.
      operationId: HolidayList.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /HolidayLists/change-stream:
    post:
      tags:
        - HolidayList
      summary: Create a change stream.
      operationId: HolidayList.createChangeStream__post_HolidayLists_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - HolidayList
      summary: Create a change stream.
      operationId: HolidayList.createChangeStream__get_HolidayLists_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /HolidayLists/createWithHolidays:
    post:
      tags:
        - HolidayList
      operationId: HolidayList.createWithHolidays
      parameters:
        - name: holidayList
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/HolidayLists/{id}/updateWithHolidays':
    put:
      tags:
        - HolidayList
      operationId: HolidayList.updateWithHolidays
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
        - name: holidayList
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/HolidayLists/{id}/deleteWithHolidays':
    delete:
      tags:
        - HolidayList
      operationId: HolidayList.deleteWithHolidays
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Prompts/{id}/queue':
    get:
      tags:
        - Prompt
      summary: Fetches belongsTo relation queue.
      operationId: Prompt.prototype.__get__queue
      parameters:
        - name: id
          in: path
          description: Prompt id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  /Prompts:
    post:
      tags:
        - Prompt
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Prompt.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    patch:
      tags:
        - Prompt
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Prompt.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    put:
      tags:
        - Prompt
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Prompt.replaceOrCreate__put_Prompts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    get:
      tags:
        - Prompt
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Prompt.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Prompt'
      deprecated: false
  /Prompts/replaceOrCreate:
    post:
      tags:
        - Prompt
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Prompt.replaceOrCreate__post_Prompts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  /Prompts/upsertWithWhere:
    post:
      tags:
        - Prompt
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Prompt.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  '/Prompts/{id}/exists':
    get:
      tags:
        - Prompt
      summary: Check whether a model instance exists in the data source.
      operationId: 'Prompt.exists__get_Prompts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Prompts/{id}':
    head:
      tags:
        - Prompt
      summary: Check whether a model instance exists in the data source.
      operationId: 'Prompt.exists__head_Prompts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Prompt
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Prompt.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    put:
      tags:
        - Prompt
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Prompt.replaceById__put_Prompts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
    delete:
      tags:
        - Prompt
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Prompt.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Prompt
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Prompt.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Prompt id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  '/Prompts/{id}/replace':
    post:
      tags:
        - Prompt
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Prompt.replaceById__post_Prompts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  /Prompts/findOne:
    get:
      tags:
        - Prompt
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Prompt.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Prompt'
      deprecated: false
  /Prompts/update:
    post:
      tags:
        - Prompt
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Prompt.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Prompt'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Prompts/count:
    get:
      tags:
        - Prompt
      summary: Count instances of the model matched by where from the data source.
      operationId: Prompt.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Prompts/change-stream:
    post:
      tags:
        - Prompt
      summary: Create a change stream.
      operationId: Prompt.createChangeStream__post_Prompts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Prompt
      summary: Create a change stream.
      operationId: Prompt.createChangeStream__get_Prompts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Prompts/upload:
    put:
      tags:
        - Prompt
      operationId: Prompt.upload
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              res:
                type: string
      deprecated: false
  '/Prompts/{id}/deleteFile':
    delete:
      tags:
        - Prompt
      operationId: Prompt.deleteFile
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Prompts/{queueId}/createPrompts':
    get:
      tags:
        - Prompt
      operationId: Prompt.createPrompts
      parameters:
        - name: queueId
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Prompts/{id}/clearPrompt':
    put:
      tags:
        - Prompt
      operationId: Prompt.clearPrompt
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  /Prompts/deletePromptRows:
    delete:
      tags:
        - Prompt
      operationId: Prompt.deletePromptRows
      parameters:
        - name: payload
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/RecurringTimeRanges/{id}/schedule':
    get:
      tags:
        - RecurringTimeRange
      summary: Fetches belongsTo relation schedule.
      operationId: RecurringTimeRange.prototype.__get__schedule
      parameters:
        - name: id
          in: path
          description: RecurringTimeRange id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  /RecurringTimeRanges:
    post:
      tags:
        - RecurringTimeRange
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RecurringTimeRange.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    patch:
      tags:
        - RecurringTimeRange
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: RecurringTimeRange.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    put:
      tags:
        - RecurringTimeRange
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RecurringTimeRange.replaceOrCreate__put_RecurringTimeRanges
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    get:
      tags:
        - RecurringTimeRange
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RecurringTimeRange.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  /RecurringTimeRanges/replaceOrCreate:
    post:
      tags:
        - RecurringTimeRange
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        RecurringTimeRange.replaceOrCreate__post_RecurringTimeRanges_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  /RecurringTimeRanges/upsertWithWhere:
    post:
      tags:
        - RecurringTimeRange
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: RecurringTimeRange.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  '/RecurringTimeRanges/{id}/exists':
    get:
      tags:
        - RecurringTimeRange
      summary: Check whether a model instance exists in the data source.
      operationId: 'RecurringTimeRange.exists__get_RecurringTimeRanges_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/RecurringTimeRanges/{id}':
    head:
      tags:
        - RecurringTimeRange
      summary: Check whether a model instance exists in the data source.
      operationId: 'RecurringTimeRange.exists__head_RecurringTimeRanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - RecurringTimeRange
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: RecurringTimeRange.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    put:
      tags:
        - RecurringTimeRange
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RecurringTimeRange.replaceById__put_RecurringTimeRanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
    delete:
      tags:
        - RecurringTimeRange
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: RecurringTimeRange.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - RecurringTimeRange
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: RecurringTimeRange.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: RecurringTimeRange id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  '/RecurringTimeRanges/{id}/replace':
    post:
      tags:
        - RecurringTimeRange
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RecurringTimeRange.replaceById__post_RecurringTimeRanges_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  /RecurringTimeRanges/findOne:
    get:
      tags:
        - RecurringTimeRange
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RecurringTimeRange.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RecurringTimeRange'
      deprecated: false
  /RecurringTimeRanges/update:
    post:
      tags:
        - RecurringTimeRange
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: RecurringTimeRange.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RecurringTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /RecurringTimeRanges/count:
    get:
      tags:
        - RecurringTimeRange
      summary: Count instances of the model matched by where from the data source.
      operationId: RecurringTimeRange.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /RecurringTimeRanges/change-stream:
    post:
      tags:
        - RecurringTimeRange
      summary: Create a change stream.
      operationId: >-
        RecurringTimeRange.createChangeStream__post_RecurringTimeRanges_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - RecurringTimeRange
      summary: Create a change stream.
      operationId: >-
        RecurringTimeRange.createChangeStream__get_RecurringTimeRanges_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/SingleDateTimeRanges/{id}/schedule':
    get:
      tags:
        - SingleDateTimeRange
      summary: Fetches belongsTo relation schedule.
      operationId: SingleDateTimeRange.prototype.__get__schedule
      parameters:
        - name: id
          in: path
          description: SingleDateTimeRange id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Schedule'
      deprecated: false
  /SingleDateTimeRanges:
    post:
      tags:
        - SingleDateTimeRange
      summary: Create a new instance of the model and persist it into the data source.
      operationId: SingleDateTimeRange.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    patch:
      tags:
        - SingleDateTimeRange
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: SingleDateTimeRange.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    put:
      tags:
        - SingleDateTimeRange
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: SingleDateTimeRange.replaceOrCreate__put_SingleDateTimeRanges
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    get:
      tags:
        - SingleDateTimeRange
      summary: Find all instances of the model matched by filter from the data source.
      operationId: SingleDateTimeRange.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  /SingleDateTimeRanges/replaceOrCreate:
    post:
      tags:
        - SingleDateTimeRange
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        SingleDateTimeRange.replaceOrCreate__post_SingleDateTimeRanges_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  /SingleDateTimeRanges/upsertWithWhere:
    post:
      tags:
        - SingleDateTimeRange
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: SingleDateTimeRange.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  '/SingleDateTimeRanges/{id}/exists':
    get:
      tags:
        - SingleDateTimeRange
      summary: Check whether a model instance exists in the data source.
      operationId: 'SingleDateTimeRange.exists__get_SingleDateTimeRanges_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/SingleDateTimeRanges/{id}':
    head:
      tags:
        - SingleDateTimeRange
      summary: Check whether a model instance exists in the data source.
      operationId: 'SingleDateTimeRange.exists__head_SingleDateTimeRanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - SingleDateTimeRange
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: SingleDateTimeRange.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    put:
      tags:
        - SingleDateTimeRange
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'SingleDateTimeRange.replaceById__put_SingleDateTimeRanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
    delete:
      tags:
        - SingleDateTimeRange
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: SingleDateTimeRange.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - SingleDateTimeRange
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: SingleDateTimeRange.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: SingleDateTimeRange id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  '/SingleDateTimeRanges/{id}/replace':
    post:
      tags:
        - SingleDateTimeRange
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'SingleDateTimeRange.replaceById__post_SingleDateTimeRanges_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  /SingleDateTimeRanges/findOne:
    get:
      tags:
        - SingleDateTimeRange
      summary: Find first instance of the model matched by filter from the data source.
      operationId: SingleDateTimeRange.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SingleDateTimeRange'
      deprecated: false
  /SingleDateTimeRanges/update:
    post:
      tags:
        - SingleDateTimeRange
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: SingleDateTimeRange.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SingleDateTimeRange'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /SingleDateTimeRanges/count:
    get:
      tags:
        - SingleDateTimeRange
      summary: Count instances of the model matched by where from the data source.
      operationId: SingleDateTimeRange.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /SingleDateTimeRanges/change-stream:
    post:
      tags:
        - SingleDateTimeRange
      summary: Create a change stream.
      operationId: >-
        SingleDateTimeRange.createChangeStream__post_SingleDateTimeRanges_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - SingleDateTimeRange
      summary: Create a change stream.
      operationId: >-
        SingleDateTimeRange.createChangeStream__get_SingleDateTimeRanges_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Lcsas/{id}/queues/{fk}':
    get:
      tags:
        - Lcsa
      summary: Find a related item by id for queues.
      operationId: Lcsa.prototype.__findById__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - Lcsa
      summary: Delete a related item by id for queues.
      operationId: Lcsa.prototype.__destroyById__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Lcsa
      summary: Update a related item by id for queues.
      operationId: Lcsa.prototype.__updateById__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for queues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
  '/Lcsas/{id}/queues':
    get:
      tags:
        - Lcsa
      summary: Queries queues of Lcsa.
      operationId: Lcsa.prototype.__get__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Queue'
      deprecated: false
    post:
      tags:
        - Lcsa
      summary: Creates a new instance in queues of this model.
      operationId: Lcsa.prototype.__create__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Queue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Queue'
      deprecated: false
    delete:
      tags:
        - Lcsa
      summary: Deletes all queues of this model.
      operationId: Lcsa.prototype.__delete__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Lcsas/{id}/queues/count':
    get:
      tags:
        - Lcsa
      summary: Counts queues of Lcsa.
      operationId: Lcsa.prototype.__count__queues
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Lcsas:
    post:
      tags:
        - Lcsa
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Lcsa.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
    patch:
      tags:
        - Lcsa
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Lcsa.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
    put:
      tags:
        - Lcsa
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Lcsa.replaceOrCreate__put_Lcsas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
    get:
      tags:
        - Lcsa
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Lcsa.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Lcsa'
      deprecated: false
  /Lcsas/replaceOrCreate:
    post:
      tags:
        - Lcsa
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Lcsa.replaceOrCreate__post_Lcsas_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  /Lcsas/upsertWithWhere:
    post:
      tags:
        - Lcsa
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Lcsa.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  '/Lcsas/{id}/exists':
    get:
      tags:
        - Lcsa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lcsa.exists__get_Lcsas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Lcsas/{id}':
    head:
      tags:
        - Lcsa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lcsa.exists__head_Lcsas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Lcsa
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Lcsa.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
    put:
      tags:
        - Lcsa
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Lcsa.replaceById__put_Lcsas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
    delete:
      tags:
        - Lcsa
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Lcsa.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Lcsa
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Lcsa.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Lcsa id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  '/Lcsas/{id}/replace':
    post:
      tags:
        - Lcsa
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Lcsa.replaceById__post_Lcsas_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  /Lcsas/findOne:
    get:
      tags:
        - Lcsa
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Lcsa.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lcsa'
      deprecated: false
  /Lcsas/update:
    post:
      tags:
        - Lcsa
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Lcsa.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lcsa'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Lcsas/count:
    get:
      tags:
        - Lcsa
      summary: Count instances of the model matched by where from the data source.
      operationId: Lcsa.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Lcsas/change-stream:
    post:
      tags:
        - Lcsa
      summary: Create a change stream.
      operationId: Lcsa.createChangeStream__post_Lcsas_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Lcsa
      summary: Create a change stream.
      operationId: Lcsa.createChangeStream__get_Lcsas_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Lcsas/toggle:
    put:
      tags:
        - Lcsa
      operationId: Lcsa.toggle
      parameters:
        - name: queue
          in: body
          required: false
          schema:
            $ref: '#/definitions/x-any'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: object
      deprecated: false
tags:
  - name: User
  - name: Queue
  - name: Schedule
  - name: Holiday
  - name: HolidayList
  - name: Prompt
  - name: RecurringTimeRange
  - name: SingleDateTimeRange
  - name: Lcsa
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Schedule:
    properties:
      name:
        type: string
      id:
        type: number
        format: double
    required:
      - name
    additionalProperties: false
  HolidayList:
    properties:
      name:
        type: string
      id:
        type: number
        format: double
    required:
      - name
    additionalProperties: false
  Prompt:
    properties:
      name:
        type: string
      index:
        type: number
        format: double
      language:
        type: string
      type:
        type: string
      file_path:
        type: string
      queueId:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - index
      - language
      - type
      - queueId
    additionalProperties: false
  Lcsa:
    properties:
      lcsa_name:
        type: string
      lcsa_id:
        type: number
        format: double
      lcsa_enabled:
        default: false
        type: boolean
      id:
        type: number
        format: double
    additionalProperties: false
  Queue:
    properties:
      name:
        type: string
      county_code:
        type: string
      ewt:
        type: number
        format: double
      force_closed:
        default: false
        type: boolean
      optional_prompt_enabled:
        default: false
        type: boolean
      county_transfer_range:
        type: number
        format: double
      county_desc:
        type: string
      scheduleId:
        type: number
        format: double
      holidayListId:
        type: number
        format: double
      lcsaId:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - name
      - county_code
    additionalProperties: false
  RecurringTimeRange:
    properties:
      sun:
        type: boolean
      mon:
        type: boolean
      tue:
        type: boolean
      wed:
        type: boolean
      thu:
        type: boolean
      fri:
        type: boolean
      sat:
        type: boolean
      start:
        type: string
      end:
        type: string
      scheduleId:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - sun
      - mon
      - tue
      - wed
      - thu
      - fri
      - sat
      - start
      - end
      - scheduleId
    additionalProperties: false
  SingleDateTimeRange:
    properties:
      date:
        type: string
      start:
        type: string
      end:
        type: string
      closed_all_day:
        default: false
        type: boolean
      scheduleId:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - date
      - scheduleId
    additionalProperties: false
  Holiday:
    properties:
      name:
        type: string
      date:
        type: string
      id:
        type: number
        format: double
      holidayListId:
        type: number
        format: double
    required:
      - date
    additionalProperties: false
